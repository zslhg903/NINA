


using System;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Windows.Media;
using NINA.Profile.Interfaces;
using NINA.Core.Utility;

// Auto Generated by "PluginSettingsTemplate.tt"
namespace NINA.Profile.Interfaces {
    public interface IPluginSettings : ISettings {
        void SetValue(Guid pluginId, string key, Boolean value);
        bool TryGetValue(Guid pluginId, string key, out Boolean value);
        void SetValue(Guid pluginId, string key, Byte value);
        bool TryGetValue(Guid pluginId, string key, out Byte value);
        void SetValue(Guid pluginId, string key, SByte value);
        bool TryGetValue(Guid pluginId, string key, out SByte value);
        void SetValue(Guid pluginId, string key, Char value);
        bool TryGetValue(Guid pluginId, string key, out Char value);
        void SetValue(Guid pluginId, string key, Decimal value);
        bool TryGetValue(Guid pluginId, string key, out Decimal value);
        void SetValue(Guid pluginId, string key, Double value);
        bool TryGetValue(Guid pluginId, string key, out Double value);
        void SetValue(Guid pluginId, string key, Single value);
        bool TryGetValue(Guid pluginId, string key, out Single value);
        void SetValue(Guid pluginId, string key, Int32 value);
        bool TryGetValue(Guid pluginId, string key, out Int32 value);
        void SetValue(Guid pluginId, string key, UInt32 value);
        bool TryGetValue(Guid pluginId, string key, out UInt32 value);
        void SetValue(Guid pluginId, string key, Int64 value);
        bool TryGetValue(Guid pluginId, string key, out Int64 value);
        void SetValue(Guid pluginId, string key, UInt64 value);
        bool TryGetValue(Guid pluginId, string key, out UInt64 value);
        void SetValue(Guid pluginId, string key, Int16 value);
        bool TryGetValue(Guid pluginId, string key, out Int16 value);
        void SetValue(Guid pluginId, string key, UInt16 value);
        bool TryGetValue(Guid pluginId, string key, out UInt16 value);
        void SetValue(Guid pluginId, string key, String value);
        bool TryGetValue(Guid pluginId, string key, out String value);
        void SetValue(Guid pluginId, string key, DateTime value);
        bool TryGetValue(Guid pluginId, string key, out DateTime value);
        void SetValue(Guid pluginId, string key, Guid value);
        bool TryGetValue(Guid pluginId, string key, out Guid value);
        bool TryGetTypeOfField(Guid pluginId, string key, out Type fieldType);
    }

    public interface IPluginOptionsAccessor {
        Color GetValueColor(string name, Color defaultValue);
        void SetValueColor(string name, Color value);
        T GetValueEnum<T>(string name, T value) where T : struct, Enum;
        void SetValueEnum<T>(string name, T defaultValue) where T : struct, Enum;
        void SetValueBoolean(string name, Boolean value);
        Boolean GetValueBoolean(string name, Boolean defaultValue);
        void SetValueByte(string name, Byte value);
        Byte GetValueByte(string name, Byte defaultValue);
        void SetValueSByte(string name, SByte value);
        SByte GetValueSByte(string name, SByte defaultValue);
        void SetValueChar(string name, Char value);
        Char GetValueChar(string name, Char defaultValue);
        void SetValueDecimal(string name, Decimal value);
        Decimal GetValueDecimal(string name, Decimal defaultValue);
        void SetValueDouble(string name, Double value);
        Double GetValueDouble(string name, Double defaultValue);
        void SetValueSingle(string name, Single value);
        Single GetValueSingle(string name, Single defaultValue);
        void SetValueInt32(string name, Int32 value);
        Int32 GetValueInt32(string name, Int32 defaultValue);
        void SetValueUInt32(string name, UInt32 value);
        UInt32 GetValueUInt32(string name, UInt32 defaultValue);
        void SetValueInt64(string name, Int64 value);
        Int64 GetValueInt64(string name, Int64 defaultValue);
        void SetValueUInt64(string name, UInt64 value);
        UInt64 GetValueUInt64(string name, UInt64 defaultValue);
        void SetValueInt16(string name, Int16 value);
        Int16 GetValueInt16(string name, Int16 defaultValue);
        void SetValueUInt16(string name, UInt16 value);
        UInt16 GetValueUInt16(string name, UInt16 defaultValue);
        void SetValueString(string name, String value);
        String GetValueString(string name, String defaultValue);
        void SetValueDateTime(string name, DateTime value);
        DateTime GetValueDateTime(string name, DateTime defaultValue);
        void SetValueGuid(string name, Guid value);
        Guid GetValueGuid(string name, Guid defaultValue);
    }
}

// Auto Generated by "PluginSettingsTemplate.tt"
namespace NINA.Profile {
    [Serializable()]
    [DataContract]
    public partial class PluginSettings : Settings, IPluginSettings {
        public PluginSettings() {
            pluginStorage = new Dictionary<Guid, IDictionary<string, object>>();
        }
        
        [DataMember]
        private IDictionary<Guid, IDictionary<string, object>> pluginStorage { get; set; }
        
        protected override void SetDefaultValues() {
            pluginStorage = new Dictionary<Guid, IDictionary<string, object>>();
        }

        public void SetValue(Guid pluginId, string key, Boolean value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Boolean value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Boolean)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Boolean);
                        return false;
                    }
                    value = (Boolean)obj;
                    return true;
                }
            }
            value = default(Boolean);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Byte value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Byte value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Byte)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Byte);
                        return false;
                    }
                    value = (Byte)obj;
                    return true;
                }
            }
            value = default(Byte);
            return false;
        }
        public void SetValue(Guid pluginId, string key, SByte value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out SByte value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(SByte)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(SByte);
                        return false;
                    }
                    value = (SByte)obj;
                    return true;
                }
            }
            value = default(SByte);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Char value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Char value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Char)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Char);
                        return false;
                    }
                    value = (Char)obj;
                    return true;
                }
            }
            value = default(Char);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Decimal value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Decimal value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Decimal)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Decimal);
                        return false;
                    }
                    value = (Decimal)obj;
                    return true;
                }
            }
            value = default(Decimal);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Double value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Double value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Double)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Double);
                        return false;
                    }
                    value = (Double)obj;
                    return true;
                }
            }
            value = default(Double);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Single value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Single value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Single)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Single);
                        return false;
                    }
                    value = (Single)obj;
                    return true;
                }
            }
            value = default(Single);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Int32 value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Int32 value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Int32)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Int32);
                        return false;
                    }
                    value = (Int32)obj;
                    return true;
                }
            }
            value = default(Int32);
            return false;
        }
        public void SetValue(Guid pluginId, string key, UInt32 value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out UInt32 value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(UInt32)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(UInt32);
                        return false;
                    }
                    value = (UInt32)obj;
                    return true;
                }
            }
            value = default(UInt32);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Int64 value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Int64 value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Int64)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Int64);
                        return false;
                    }
                    value = (Int64)obj;
                    return true;
                }
            }
            value = default(Int64);
            return false;
        }
        public void SetValue(Guid pluginId, string key, UInt64 value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out UInt64 value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(UInt64)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(UInt64);
                        return false;
                    }
                    value = (UInt64)obj;
                    return true;
                }
            }
            value = default(UInt64);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Int16 value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Int16 value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Int16)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Int16);
                        return false;
                    }
                    value = (Int16)obj;
                    return true;
                }
            }
            value = default(Int16);
            return false;
        }
        public void SetValue(Guid pluginId, string key, UInt16 value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out UInt16 value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(UInt16)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(UInt16);
                        return false;
                    }
                    value = (UInt16)obj;
                    return true;
                }
            }
            value = default(UInt16);
            return false;
        }
        public void SetValue(Guid pluginId, string key, String value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out String value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(String)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(String);
                        return false;
                    }
                    value = (String)obj;
                    return true;
                }
            }
            value = default(String);
            return false;
        }
        public void SetValue(Guid pluginId, string key, DateTime value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out DateTime value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(DateTime)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(DateTime);
                        return false;
                    }
                    value = (DateTime)obj;
                    return true;
                }
            }
            value = default(DateTime);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Guid value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Guid value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Guid)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Guid);
                        return false;
                    }
                    value = (Guid)obj;
                    return true;
                }
            }
            value = default(Guid);
            return false;
        }
        public bool TryGetTypeOfField(Guid pluginId, string key, out Type fieldType) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    fieldType = obj.GetType();
                    return true;
                }
            }
            fieldType = null;
            return false;;
        }
    } 


    public class PluginOptionsAccessor : IPluginOptionsAccessor {
        private readonly IProfileService profileService;
        private readonly Guid pluginGuid;

        public PluginOptionsAccessor(IProfileService profileService, Guid pluginGuid) {
            this.profileService = profileService;
            this.pluginGuid = pluginGuid;
        }

        public static Guid? GetAssemblyGuid(Type type) {
            var guidAttributes = type.Assembly.GetCustomAttributes(typeof(GuidAttribute), false);
            if (guidAttributes == null || guidAttributes.Length != 1) {
                return null;
            }
            return Guid.Parse(((GuidAttribute)guidAttributes[0]).Value);
        }
        
        public void SetValueBoolean(string name, Boolean value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public Boolean GetValueBoolean(string name, Boolean defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out Boolean result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueByte(string name, Byte value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public Byte GetValueByte(string name, Byte defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out Byte result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueSByte(string name, SByte value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public SByte GetValueSByte(string name, SByte defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out SByte result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueChar(string name, Char value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public Char GetValueChar(string name, Char defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out Char result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueDecimal(string name, Decimal value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public Decimal GetValueDecimal(string name, Decimal defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out Decimal result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueDouble(string name, Double value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public Double GetValueDouble(string name, Double defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out Double result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueSingle(string name, Single value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public Single GetValueSingle(string name, Single defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out Single result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueInt32(string name, Int32 value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public Int32 GetValueInt32(string name, Int32 defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out Int32 result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueUInt32(string name, UInt32 value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public UInt32 GetValueUInt32(string name, UInt32 defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out UInt32 result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueInt64(string name, Int64 value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public Int64 GetValueInt64(string name, Int64 defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out Int64 result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueUInt64(string name, UInt64 value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public UInt64 GetValueUInt64(string name, UInt64 defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out UInt64 result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueInt16(string name, Int16 value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public Int16 GetValueInt16(string name, Int16 defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out Int16 result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueUInt16(string name, UInt16 value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public UInt16 GetValueUInt16(string name, UInt16 defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out UInt16 result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueString(string name, String value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public String GetValueString(string name, String defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out String result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueDateTime(string name, DateTime value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public DateTime GetValueDateTime(string name, DateTime defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out DateTime result)) {
                return result;
            }
            return defaultValue;
        }
        public void SetValueGuid(string name, Guid value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public Guid GetValueGuid(string name, Guid defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out Guid result)) {
                return result;
            }
            return defaultValue;
        }
        
        public Color GetValueColor(string name, Color defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out int result)) {
                return IntToColor(result);
            }
            return defaultValue;
        }

        public T GetValueEnum<T>(string name, T defaultValue) where T : struct, Enum {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out string resultString)) {
                if (Enum.TryParse<T>(resultString, out var result)) {
                    return result;
                }
            }
            return defaultValue;
        }

        private static int ColorToInt(Color color) {
            return color.A << 24 | color.R << 16 | color.G << 8 | color.B;
        }

        private static Color IntToColor(int colorInt) {
            byte a = (byte)(colorInt >> 24);
            byte r = (byte)(colorInt >> 16);
            byte g = (byte)(colorInt >> 8);
            byte b = (byte)(colorInt);
            return Color.FromArgb(a, r, g, b);
        }

        public void SetValueColor(string name, Color value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, ColorToInt(value));
        }

        public void SetValueEnum<T>(string name, T value) where T : struct, Enum {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, Enum.GetName(typeof(T), value));
        }
    }
}