<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(TargetPath)" #>


<# Type[] types = new[] {
        typeof(bool),
        typeof(byte),
        typeof(sbyte),
        typeof(char),
        typeof(decimal),
        typeof(double),
        typeof(float),
        typeof(int),
        typeof(uint),
        typeof(long),
        typeof(ulong),
        typeof(short),
        typeof(ushort),
        typeof(string),
        typeof(DateTime),
        typeof(Guid)
    };
#>

using System;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Windows.Media;
using NINA.Profile.Interfaces;
using NINA.Core.Utility;

// Auto Generated by "PluginSettingsTemplate.tt"
namespace NINA.Profile.Interfaces {
    public interface IPluginSettings : ISettings {
    <# foreach (var type in types) { 
    #>
    void SetValue(Guid pluginId, string key, <#= type.Name #> value);
        bool TryGetValue(Guid pluginId, string key, out <#= type.Name #> value);
    <#
    } #>
    bool TryGetTypeOfField(Guid pluginId, string key, out Type fieldType);
    }

    public interface IPluginOptionsAccessor {
        Color GetValueColor(string name, Color defaultValue);
        void SetValueColor(string name, Color value);
        T GetValueEnum<T>(string name, T value) where T : struct, Enum;
        void SetValueEnum<T>(string name, T defaultValue) where T : struct, Enum;
    <# foreach (var type in types) { 
        string typeName = $"{char.ToUpper(type.Name[0])}{type.Name.Substring(1)}";
    #>
    void SetValue<#= typeName #>(string name, <#= type.Name #> value);
        <#= type.Name #> GetValue<#= typeName #>(string name, <#= type.Name #> defaultValue);
    <#
    } #>
}
}

// Auto Generated by "PluginSettingsTemplate.tt"
namespace NINA.Profile {
    [Serializable()]
    [DataContract]
    public partial class PluginSettings : Settings, IPluginSettings {
        public PluginSettings() {
            pluginStorage = new Dictionary<Guid, IDictionary<string, object>>();
        }
        
        [DataMember]
        private IDictionary<Guid, IDictionary<string, object>> pluginStorage { get; set; }
        
        protected override void SetDefaultValues() {
            pluginStorage = new Dictionary<Guid, IDictionary<string, object>>();
        }

    <# foreach (var type in types) { 
    #>
    public void SetValue(Guid pluginId, string key, <#= type.Name #> value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out <#= type.Name #> value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(<#= type.Name #>)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(<#= type.Name #>);
                        return false;
                    }
                    value = (<#= type.Name #>)obj;
                    return true;
                }
            }
            value = default(<#= type.Name #>);
            return false;
        }
    <#
    } #>
    public bool TryGetTypeOfField(Guid pluginId, string key, out Type fieldType) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    fieldType = obj.GetType();
                    return true;
                }
            }
            fieldType = null;
            return false;;
        }
    } 


    public class PluginOptionsAccessor : IPluginOptionsAccessor {
        private readonly IProfileService profileService;
        private readonly Guid pluginGuid;

        public PluginOptionsAccessor(IProfileService profileService, Guid pluginGuid) {
            this.profileService = profileService;
            this.pluginGuid = pluginGuid;
        }

        public static Guid? GetAssemblyGuid(Type type) {
            var guidAttributes = type.Assembly.GetCustomAttributes(typeof(GuidAttribute), false);
            if (guidAttributes == null || guidAttributes.Length != 1) {
                return null;
            }
            return Guid.Parse(((GuidAttribute)guidAttributes[0]).Value);
        }
        
        <# foreach (var type in types) { 
            string typeName = $"{char.ToUpper(type.Name[0])}{type.Name.Substring(1)}";
        #>
public void SetValue<#= typeName #>(string name, <#= type.Name #> value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, value);
        }
        
        public <#= type.Name #> GetValue<#= typeName #>(string name, <#= type.Name #> defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out <#= type.Name #> result)) {
                return result;
            }
            return defaultValue;
        }
        <#
        } #>

        public Color GetValueColor(string name, Color defaultValue) {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out int result)) {
                return IntToColor(result);
            }
            return defaultValue;
        }

        public T GetValueEnum<T>(string name, T defaultValue) where T : struct, Enum {
            if (profileService.ActiveProfile.PluginSettings.TryGetValue(pluginGuid, name, out string resultString)) {
                if (Enum.TryParse<T>(resultString, out var result)) {
                    return result;
                }
            }
            return defaultValue;
        }

        private static int ColorToInt(Color color) {
            return color.A << 24 | color.R << 16 | color.G << 8 | color.B;
        }

        private static Color IntToColor(int colorInt) {
            byte a = (byte)(colorInt >> 24);
            byte r = (byte)(colorInt >> 16);
            byte g = (byte)(colorInt >> 8);
            byte b = (byte)(colorInt);
            return Color.FromArgb(a, r, g, b);
        }

        public void SetValueColor(string name, Color value) {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, ColorToInt(value));
        }

        public void SetValueEnum<T>(string name, T value) where T : struct, Enum {
            profileService.ActiveProfile.PluginSettings.SetValue(pluginGuid, name, Enum.GetName(typeof(T), value));
        }
    }
}