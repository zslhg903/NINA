using System;
using ASCOM.DriverAccess;

// Auto Generated by "AscomDeviceFacades.tt"
namespace NINA.Equipment.ASCOMFacades {
    public interface IAscomDeviceFacade<T> : IDisposable where T : AscomDriver {
        T Proxied { get; set; }
        System.Boolean Connected { get; set; }
        System.String Description { get; }
        System.String DriverInfo { get; }
        System.String DriverVersion { get; }
        System.Int16 InterfaceVersion { get; }
        System.String Name { get; }
        void SetupDialog();
    }

    public interface IFocuserFacade : IAscomDeviceFacade<Focuser> {
        System.Boolean Absolute { get; }
        System.Boolean IsMoving { get; }
        System.Boolean Link { get; set; }
        System.Int32 MaxIncrement { get; }
        System.Int32 MaxStep { get; }
        System.Int32 Position { get; }
        System.Double StepSize { get; }
        System.Boolean TempComp { get; set; }
        System.Boolean TempCompAvailable { get; }
        System.Double Temperature { get; }
        System.Collections.ArrayList SupportedActions { get; }
        void Halt();
        void Move(System.Int32 Position);
        System.String Action(System.String ActionName, System.String ActionParameters);
        void CommandBlind(System.String Command, System.Boolean Raw);
        System.Boolean CommandBool(System.String Command, System.Boolean Raw);
        System.String CommandString(System.String Command, System.Boolean Raw);
    }

    public class FocuserFacadeProxy : IFocuserFacade {
        private Focuser proxied;

        public Focuser Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public System.Boolean Absolute { get => proxied.Absolute; }
        public System.Boolean IsMoving { get => proxied.IsMoving; }
        public System.Boolean Link { get => proxied.Link; set => proxied.Link = value; }
        public System.Int32 MaxIncrement { get => proxied.MaxIncrement; }
        public System.Int32 MaxStep { get => proxied.MaxStep; }
        public System.Int32 Position { get => proxied.Position; }
        public System.Double StepSize { get => proxied.StepSize; }
        public System.Boolean TempComp { get => proxied.TempComp; set => proxied.TempComp = value; }
        public System.Boolean TempCompAvailable { get => proxied.TempCompAvailable; }
        public System.Double Temperature { get => proxied.Temperature; }
        public System.Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public System.String Description { get => proxied.Description; }
        public System.String DriverInfo { get => proxied.DriverInfo; }
        public System.String DriverVersion { get => proxied.DriverVersion; }
        public System.Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public System.String Name { get => proxied.Name; }
        public System.Collections.ArrayList SupportedActions { get => proxied.SupportedActions; }
        public void Halt() {
            proxied.Halt();
        }
        public void Move(System.Int32 Position) {
            proxied.Move(Position);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public System.String Action(System.String ActionName, System.String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(System.String Command, System.Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public System.Boolean CommandBool(System.String Command, System.Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public System.String CommandString(System.String Command, System.Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public override System.Boolean Equals(System.Object obj) {
            return proxied.Equals(obj);
        }
        public override System.Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override System.String ToString() {
            return proxied.ToString();
        }
    }
    public interface ICameraFacade : IAscomDeviceFacade<Camera> {
        System.Int16 BinX { get; set; }
        System.Int16 BinY { get; set; }
        System.Double CCDTemperature { get; }
        ASCOM.DeviceInterface.CameraStates CameraState { get; }
        System.Int32 CameraXSize { get; }
        System.Int32 CameraYSize { get; }
        System.Boolean CanAbortExposure { get; }
        System.Boolean CanAsymmetricBin { get; }
        System.Boolean CanGetCoolerPower { get; }
        System.Boolean CanPulseGuide { get; }
        System.Boolean CanSetCCDTemperature { get; }
        System.Boolean CanStopExposure { get; }
        System.Boolean CoolerOn { get; set; }
        System.Double CoolerPower { get; }
        System.Double ElectronsPerADU { get; }
        System.Double FullWellCapacity { get; }
        System.Boolean HasShutter { get; }
        System.Double HeatSinkTemperature { get; }
        System.Object ImageArray { get; }
        System.Object ImageArrayVariant { get; }
        System.Boolean ImageReady { get; }
        System.Boolean IsPulseGuiding { get; }
        System.Double LastExposureDuration { get; }
        System.String LastExposureStartTime { get; }
        System.Int32 MaxADU { get; }
        System.Int16 MaxBinX { get; }
        System.Int16 MaxBinY { get; }
        System.Int32 NumX { get; set; }
        System.Int32 NumY { get; set; }
        System.Double PixelSizeX { get; }
        System.Double PixelSizeY { get; }
        System.Double SetCCDTemperature { get; set; }
        System.Int32 StartX { get; set; }
        System.Int32 StartY { get; set; }
        System.Int16 BayerOffsetX { get; }
        System.Int16 BayerOffsetY { get; }
        System.Boolean CanFastReadout { get; }
        System.Double ExposureMax { get; }
        System.Double ExposureMin { get; }
        System.Double ExposureResolution { get; }
        System.Boolean FastReadout { get; set; }
        System.Int16 Gain { get; set; }
        System.Int16 GainMax { get; }
        System.Int16 GainMin { get; }
        System.Collections.ArrayList Gains { get; }
        System.Int16 PercentCompleted { get; }
        System.Int16 ReadoutMode { get; set; }
        System.Collections.ArrayList ReadoutModes { get; }
        System.String SensorName { get; }
        ASCOM.DeviceInterface.SensorType SensorType { get; }
        System.Int32 Offset { get; set; }
        System.Int32 OffsetMax { get; }
        System.Int32 OffsetMin { get; }
        System.Collections.ArrayList Offsets { get; }
        System.Double SubExposureDuration { get; set; }
        System.Collections.ArrayList SupportedActions { get; }
        void AbortExposure();
        void PulseGuide(ASCOM.DeviceInterface.GuideDirections Direction, System.Int32 Duration);
        void StartExposure(System.Double Duration, System.Boolean Light);
        void StopExposure();
        System.String Action(System.String ActionName, System.String ActionParameters);
        void CommandBlind(System.String Command, System.Boolean Raw);
        System.Boolean CommandBool(System.String Command, System.Boolean Raw);
        System.String CommandString(System.String Command, System.Boolean Raw);
    }

    public class CameraFacadeProxy : ICameraFacade {
        private Camera proxied;

        public Camera Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public System.Int16 BinX { get => proxied.BinX; set => proxied.BinX = value; }
        public System.Int16 BinY { get => proxied.BinY; set => proxied.BinY = value; }
        public System.Double CCDTemperature { get => proxied.CCDTemperature; }
        public ASCOM.DeviceInterface.CameraStates CameraState { get => proxied.CameraState; }
        public System.Int32 CameraXSize { get => proxied.CameraXSize; }
        public System.Int32 CameraYSize { get => proxied.CameraYSize; }
        public System.Boolean CanAbortExposure { get => proxied.CanAbortExposure; }
        public System.Boolean CanAsymmetricBin { get => proxied.CanAsymmetricBin; }
        public System.Boolean CanGetCoolerPower { get => proxied.CanGetCoolerPower; }
        public System.Boolean CanPulseGuide { get => proxied.CanPulseGuide; }
        public System.Boolean CanSetCCDTemperature { get => proxied.CanSetCCDTemperature; }
        public System.Boolean CanStopExposure { get => proxied.CanStopExposure; }
        public System.Boolean CoolerOn { get => proxied.CoolerOn; set => proxied.CoolerOn = value; }
        public System.Double CoolerPower { get => proxied.CoolerPower; }
        public System.Double ElectronsPerADU { get => proxied.ElectronsPerADU; }
        public System.Double FullWellCapacity { get => proxied.FullWellCapacity; }
        public System.Boolean HasShutter { get => proxied.HasShutter; }
        public System.Double HeatSinkTemperature { get => proxied.HeatSinkTemperature; }
        public System.Object ImageArray { get => proxied.ImageArray; }
        public System.Object ImageArrayVariant { get => proxied.ImageArrayVariant; }
        public System.Boolean ImageReady { get => proxied.ImageReady; }
        public System.Boolean IsPulseGuiding { get => proxied.IsPulseGuiding; }
        public System.Double LastExposureDuration { get => proxied.LastExposureDuration; }
        public System.String LastExposureStartTime { get => proxied.LastExposureStartTime; }
        public System.Int32 MaxADU { get => proxied.MaxADU; }
        public System.Int16 MaxBinX { get => proxied.MaxBinX; }
        public System.Int16 MaxBinY { get => proxied.MaxBinY; }
        public System.Int32 NumX { get => proxied.NumX; set => proxied.NumX = value; }
        public System.Int32 NumY { get => proxied.NumY; set => proxied.NumY = value; }
        public System.Double PixelSizeX { get => proxied.PixelSizeX; }
        public System.Double PixelSizeY { get => proxied.PixelSizeY; }
        public System.Double SetCCDTemperature { get => proxied.SetCCDTemperature; set => proxied.SetCCDTemperature = value; }
        public System.Int32 StartX { get => proxied.StartX; set => proxied.StartX = value; }
        public System.Int32 StartY { get => proxied.StartY; set => proxied.StartY = value; }
        public System.Int16 BayerOffsetX { get => proxied.BayerOffsetX; }
        public System.Int16 BayerOffsetY { get => proxied.BayerOffsetY; }
        public System.Boolean CanFastReadout { get => proxied.CanFastReadout; }
        public System.Double ExposureMax { get => proxied.ExposureMax; }
        public System.Double ExposureMin { get => proxied.ExposureMin; }
        public System.Double ExposureResolution { get => proxied.ExposureResolution; }
        public System.Boolean FastReadout { get => proxied.FastReadout; set => proxied.FastReadout = value; }
        public System.Int16 Gain { get => proxied.Gain; set => proxied.Gain = value; }
        public System.Int16 GainMax { get => proxied.GainMax; }
        public System.Int16 GainMin { get => proxied.GainMin; }
        public System.Collections.ArrayList Gains { get => proxied.Gains; }
        public System.Int16 PercentCompleted { get => proxied.PercentCompleted; }
        public System.Int16 ReadoutMode { get => proxied.ReadoutMode; set => proxied.ReadoutMode = value; }
        public System.Collections.ArrayList ReadoutModes { get => proxied.ReadoutModes; }
        public System.String SensorName { get => proxied.SensorName; }
        public ASCOM.DeviceInterface.SensorType SensorType { get => proxied.SensorType; }
        public System.Int32 Offset { get => proxied.Offset; set => proxied.Offset = value; }
        public System.Int32 OffsetMax { get => proxied.OffsetMax; }
        public System.Int32 OffsetMin { get => proxied.OffsetMin; }
        public System.Collections.ArrayList Offsets { get => proxied.Offsets; }
        public System.Double SubExposureDuration { get => proxied.SubExposureDuration; set => proxied.SubExposureDuration = value; }
        public System.Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public System.String Description { get => proxied.Description; }
        public System.String DriverInfo { get => proxied.DriverInfo; }
        public System.String DriverVersion { get => proxied.DriverVersion; }
        public System.Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public System.String Name { get => proxied.Name; }
        public System.Collections.ArrayList SupportedActions { get => proxied.SupportedActions; }
        public void AbortExposure() {
            proxied.AbortExposure();
        }
        public void PulseGuide(ASCOM.DeviceInterface.GuideDirections Direction, System.Int32 Duration) {
            proxied.PulseGuide(Direction, Duration);
        }
        public void StartExposure(System.Double Duration, System.Boolean Light) {
            proxied.StartExposure(Duration, Light);
        }
        public void StopExposure() {
            proxied.StopExposure();
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public System.String Action(System.String ActionName, System.String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(System.String Command, System.Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public System.Boolean CommandBool(System.String Command, System.Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public System.String CommandString(System.String Command, System.Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public override System.Boolean Equals(System.Object obj) {
            return proxied.Equals(obj);
        }
        public override System.Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override System.String ToString() {
            return proxied.ToString();
        }
    }
    public interface IDomeFacade : IAscomDeviceFacade<Dome> {
        System.Double Altitude { get; }
        System.Boolean AtHome { get; }
        System.Boolean AtPark { get; }
        System.Double Azimuth { get; }
        System.Boolean CanFindHome { get; }
        System.Boolean CanPark { get; }
        System.Boolean CanSetAltitude { get; }
        System.Boolean CanSetAzimuth { get; }
        System.Boolean CanSetPark { get; }
        System.Boolean CanSetShutter { get; }
        System.Boolean CanSlave { get; }
        System.Boolean CanSyncAzimuth { get; }
        ASCOM.DeviceInterface.ShutterState ShutterStatus { get; }
        System.Boolean Slaved { get; set; }
        System.Boolean Slewing { get; }
        System.Collections.ArrayList SupportedActions { get; }
        void AbortSlew();
        void CloseShutter();
        void FindHome();
        void OpenShutter();
        void Park();
        void SetPark();
        void SlewToAltitude(System.Double Altitude);
        void SlewToAzimuth(System.Double Azimuth);
        void SyncToAzimuth(System.Double Azimuth);
        System.String Action(System.String ActionName, System.String ActionParameters);
        void CommandBlind(System.String Command, System.Boolean Raw);
        System.Boolean CommandBool(System.String Command, System.Boolean Raw);
        System.String CommandString(System.String Command, System.Boolean Raw);
    }

    public class DomeFacadeProxy : IDomeFacade {
        private Dome proxied;

        public Dome Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public System.Double Altitude { get => proxied.Altitude; }
        public System.Boolean AtHome { get => proxied.AtHome; }
        public System.Boolean AtPark { get => proxied.AtPark; }
        public System.Double Azimuth { get => proxied.Azimuth; }
        public System.Boolean CanFindHome { get => proxied.CanFindHome; }
        public System.Boolean CanPark { get => proxied.CanPark; }
        public System.Boolean CanSetAltitude { get => proxied.CanSetAltitude; }
        public System.Boolean CanSetAzimuth { get => proxied.CanSetAzimuth; }
        public System.Boolean CanSetPark { get => proxied.CanSetPark; }
        public System.Boolean CanSetShutter { get => proxied.CanSetShutter; }
        public System.Boolean CanSlave { get => proxied.CanSlave; }
        public System.Boolean CanSyncAzimuth { get => proxied.CanSyncAzimuth; }
        public ASCOM.DeviceInterface.ShutterState ShutterStatus { get => proxied.ShutterStatus; }
        public System.Boolean Slaved { get => proxied.Slaved; set => proxied.Slaved = value; }
        public System.Boolean Slewing { get => proxied.Slewing; }
        public System.Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public System.String Description { get => proxied.Description; }
        public System.String DriverInfo { get => proxied.DriverInfo; }
        public System.String DriverVersion { get => proxied.DriverVersion; }
        public System.Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public System.String Name { get => proxied.Name; }
        public System.Collections.ArrayList SupportedActions { get => proxied.SupportedActions; }
        public void AbortSlew() {
            proxied.AbortSlew();
        }
        public void CloseShutter() {
            proxied.CloseShutter();
        }
        public void FindHome() {
            proxied.FindHome();
        }
        public void OpenShutter() {
            proxied.OpenShutter();
        }
        public void Park() {
            proxied.Park();
        }
        public void SetPark() {
            proxied.SetPark();
        }
        public void SlewToAltitude(System.Double Altitude) {
            proxied.SlewToAltitude(Altitude);
        }
        public void SlewToAzimuth(System.Double Azimuth) {
            proxied.SlewToAzimuth(Azimuth);
        }
        public void SyncToAzimuth(System.Double Azimuth) {
            proxied.SyncToAzimuth(Azimuth);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public System.String Action(System.String ActionName, System.String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(System.String Command, System.Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public System.Boolean CommandBool(System.String Command, System.Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public System.String CommandString(System.String Command, System.Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public override System.Boolean Equals(System.Object obj) {
            return proxied.Equals(obj);
        }
        public override System.Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override System.String ToString() {
            return proxied.ToString();
        }
    }
    public interface ICoverCalibratorFacade : IAscomDeviceFacade<CoverCalibrator> {
        ASCOM.DeviceInterface.CoverStatus CoverState { get; }
        ASCOM.DeviceInterface.CalibratorStatus CalibratorState { get; }
        System.Int32 Brightness { get; }
        System.Int32 MaxBrightness { get; }
        System.Collections.ArrayList SupportedActions { get; }
        void OpenCover();
        void CloseCover();
        void HaltCover();
        void CalibratorOn(System.Int32 Brightness);
        void CalibratorOff();
        System.String Action(System.String ActionName, System.String ActionParameters);
        void CommandBlind(System.String Command, System.Boolean Raw);
        System.Boolean CommandBool(System.String Command, System.Boolean Raw);
        System.String CommandString(System.String Command, System.Boolean Raw);
    }

    public class CoverCalibratorFacadeProxy : ICoverCalibratorFacade {
        private CoverCalibrator proxied;

        public CoverCalibrator Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public ASCOM.DeviceInterface.CoverStatus CoverState { get => proxied.CoverState; }
        public ASCOM.DeviceInterface.CalibratorStatus CalibratorState { get => proxied.CalibratorState; }
        public System.Int32 Brightness { get => proxied.Brightness; }
        public System.Int32 MaxBrightness { get => proxied.MaxBrightness; }
        public System.Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public System.String Description { get => proxied.Description; }
        public System.String DriverInfo { get => proxied.DriverInfo; }
        public System.String DriverVersion { get => proxied.DriverVersion; }
        public System.Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public System.String Name { get => proxied.Name; }
        public System.Collections.ArrayList SupportedActions { get => proxied.SupportedActions; }
        public void OpenCover() {
            proxied.OpenCover();
        }
        public void CloseCover() {
            proxied.CloseCover();
        }
        public void HaltCover() {
            proxied.HaltCover();
        }
        public void CalibratorOn(System.Int32 Brightness) {
            proxied.CalibratorOn(Brightness);
        }
        public void CalibratorOff() {
            proxied.CalibratorOff();
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public System.String Action(System.String ActionName, System.String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(System.String Command, System.Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public System.Boolean CommandBool(System.String Command, System.Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public System.String CommandString(System.String Command, System.Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public override System.Boolean Equals(System.Object obj) {
            return proxied.Equals(obj);
        }
        public override System.Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override System.String ToString() {
            return proxied.ToString();
        }
    }
    public interface IRotatorFacade : IAscomDeviceFacade<Rotator> {
        System.Boolean CanReverse { get; }
        System.Boolean IsMoving { get; }
        System.Single Position { get; }
        System.Boolean Reverse { get; set; }
        System.Single StepSize { get; }
        System.Single TargetPosition { get; }
        System.Single MechanicalPosition { get; }
        System.Collections.ArrayList SupportedActions { get; }
        void Halt();
        void Move(System.Single Position);
        void MoveAbsolute(System.Single Position);
        void Sync(System.Single Position);
        void MoveMechanical(System.Single Position);
        System.String Action(System.String ActionName, System.String ActionParameters);
        void CommandBlind(System.String Command, System.Boolean Raw);
        System.Boolean CommandBool(System.String Command, System.Boolean Raw);
        System.String CommandString(System.String Command, System.Boolean Raw);
    }

    public class RotatorFacadeProxy : IRotatorFacade {
        private Rotator proxied;

        public Rotator Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public System.Boolean CanReverse { get => proxied.CanReverse; }
        public System.Boolean IsMoving { get => proxied.IsMoving; }
        public System.Single Position { get => proxied.Position; }
        public System.Boolean Reverse { get => proxied.Reverse; set => proxied.Reverse = value; }
        public System.Single StepSize { get => proxied.StepSize; }
        public System.Single TargetPosition { get => proxied.TargetPosition; }
        public System.Single MechanicalPosition { get => proxied.MechanicalPosition; }
        public System.Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public System.String Description { get => proxied.Description; }
        public System.String DriverInfo { get => proxied.DriverInfo; }
        public System.String DriverVersion { get => proxied.DriverVersion; }
        public System.Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public System.String Name { get => proxied.Name; }
        public System.Collections.ArrayList SupportedActions { get => proxied.SupportedActions; }
        public void Halt() {
            proxied.Halt();
        }
        public void Move(System.Single Position) {
            proxied.Move(Position);
        }
        public void MoveAbsolute(System.Single Position) {
            proxied.MoveAbsolute(Position);
        }
        public void Sync(System.Single Position) {
            proxied.Sync(Position);
        }
        public void MoveMechanical(System.Single Position) {
            proxied.MoveMechanical(Position);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public System.String Action(System.String ActionName, System.String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(System.String Command, System.Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public System.Boolean CommandBool(System.String Command, System.Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public System.String CommandString(System.String Command, System.Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public override System.Boolean Equals(System.Object obj) {
            return proxied.Equals(obj);
        }
        public override System.Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override System.String ToString() {
            return proxied.ToString();
        }
    }
    public interface ISafetyMonitorFacade : IAscomDeviceFacade<SafetyMonitor> {
        System.Boolean IsSafe { get; }
        System.Collections.ArrayList SupportedActions { get; }
        System.String Action(System.String ActionName, System.String ActionParameters);
        void CommandBlind(System.String Command, System.Boolean Raw);
        System.Boolean CommandBool(System.String Command, System.Boolean Raw);
        System.String CommandString(System.String Command, System.Boolean Raw);
    }

    public class SafetyMonitorFacadeProxy : ISafetyMonitorFacade {
        private SafetyMonitor proxied;

        public SafetyMonitor Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public System.Boolean IsSafe { get => proxied.IsSafe; }
        public System.Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public System.String Description { get => proxied.Description; }
        public System.String DriverInfo { get => proxied.DriverInfo; }
        public System.String DriverVersion { get => proxied.DriverVersion; }
        public System.Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public System.String Name { get => proxied.Name; }
        public System.Collections.ArrayList SupportedActions { get => proxied.SupportedActions; }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public System.String Action(System.String ActionName, System.String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(System.String Command, System.Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public System.Boolean CommandBool(System.String Command, System.Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public System.String CommandString(System.String Command, System.Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public override System.Boolean Equals(System.Object obj) {
            return proxied.Equals(obj);
        }
        public override System.Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override System.String ToString() {
            return proxied.ToString();
        }
    }
    public interface ITelescopeFacade : IAscomDeviceFacade<Telescope> {
        ASCOM.DeviceInterface.AlignmentModes AlignmentMode { get; }
        System.Double Altitude { get; }
        System.Double ApertureArea { get; }
        System.Double ApertureDiameter { get; }
        System.Boolean AtHome { get; }
        System.Boolean AtPark { get; }
        System.Double Azimuth { get; }
        System.Boolean CanFindHome { get; }
        System.Boolean CanPark { get; }
        System.Boolean CanPulseGuide { get; }
        System.Boolean CanSetDeclinationRate { get; }
        System.Boolean CanSetGuideRates { get; }
        System.Boolean CanSetPark { get; }
        System.Boolean CanSetPierSide { get; }
        System.Boolean CanSetRightAscensionRate { get; }
        System.Boolean CanSetTracking { get; }
        System.Boolean CanSlew { get; }
        System.Boolean CanSlewAltAz { get; }
        System.Boolean CanSlewAltAzAsync { get; }
        System.Boolean CanSlewAsync { get; }
        System.Boolean CanSync { get; }
        System.Boolean CanSyncAltAz { get; }
        System.Boolean CanUnpark { get; }
        System.Double Declination { get; }
        System.Double DeclinationRate { get; set; }
        System.Boolean DoesRefraction { get; set; }
        ASCOM.DeviceInterface.EquatorialCoordinateType EquatorialSystem { get; }
        System.Double FocalLength { get; }
        System.Double GuideRateDeclination { get; set; }
        System.Double GuideRateRightAscension { get; set; }
        System.Boolean IsPulseGuiding { get; }
        System.Double RightAscension { get; }
        System.Double RightAscensionRate { get; set; }
        ASCOM.DeviceInterface.PierSide SideOfPier { get; set; }
        System.Double SiderealTime { get; }
        System.Double SiteElevation { get; set; }
        System.Double SiteLatitude { get; set; }
        System.Double SiteLongitude { get; set; }
        System.Int16 SlewSettleTime { get; set; }
        System.Boolean Slewing { get; }
        System.Double TargetDeclination { get; set; }
        System.Double TargetRightAscension { get; set; }
        System.Boolean Tracking { get; set; }
        ASCOM.DeviceInterface.DriveRates TrackingRate { get; set; }
        ASCOM.DeviceInterface.ITrackingRates TrackingRates { get; }
        System.DateTime UTCDate { get; set; }
        System.Collections.ArrayList SupportedActions { get; }
        void AbortSlew();
        ASCOM.DeviceInterface.IAxisRates AxisRates(ASCOM.DeviceInterface.TelescopeAxes Axis);
        System.Boolean CanMoveAxis(ASCOM.DeviceInterface.TelescopeAxes Axis);
        ASCOM.DeviceInterface.PierSide DestinationSideOfPier(System.Double RightAscension, System.Double Declination);
        void FindHome();
        void MoveAxis(ASCOM.DeviceInterface.TelescopeAxes Axis, System.Double Rate);
        void Park();
        void PulseGuide(ASCOM.DeviceInterface.GuideDirections Direction, System.Int32 Duration);
        void SetPark();
        void SlewToAltAz(System.Double Azimuth, System.Double Altitude);
        void SlewToAltAzAsync(System.Double Azimuth, System.Double Altitude);
        void SlewToCoordinates(System.Double RightAscension, System.Double Declination);
        void SlewToCoordinatesAsync(System.Double RightAscension, System.Double Declination);
        void SlewToTarget();
        void SlewToTargetAsync();
        void SyncToAltAz(System.Double Azimuth, System.Double Altitude);
        void SyncToCoordinates(System.Double RightAscension, System.Double Declination);
        void SyncToTarget();
        void Unpark();
        System.String Action(System.String ActionName, System.String ActionParameters);
        void CommandBlind(System.String Command, System.Boolean Raw);
        System.Boolean CommandBool(System.String Command, System.Boolean Raw);
        System.String CommandString(System.String Command, System.Boolean Raw);
    }

    public class TelescopeFacadeProxy : ITelescopeFacade {
        private Telescope proxied;

        public Telescope Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public ASCOM.DeviceInterface.AlignmentModes AlignmentMode { get => proxied.AlignmentMode; }
        public System.Double Altitude { get => proxied.Altitude; }
        public System.Double ApertureArea { get => proxied.ApertureArea; }
        public System.Double ApertureDiameter { get => proxied.ApertureDiameter; }
        public System.Boolean AtHome { get => proxied.AtHome; }
        public System.Boolean AtPark { get => proxied.AtPark; }
        public System.Double Azimuth { get => proxied.Azimuth; }
        public System.Boolean CanFindHome { get => proxied.CanFindHome; }
        public System.Boolean CanPark { get => proxied.CanPark; }
        public System.Boolean CanPulseGuide { get => proxied.CanPulseGuide; }
        public System.Boolean CanSetDeclinationRate { get => proxied.CanSetDeclinationRate; }
        public System.Boolean CanSetGuideRates { get => proxied.CanSetGuideRates; }
        public System.Boolean CanSetPark { get => proxied.CanSetPark; }
        public System.Boolean CanSetPierSide { get => proxied.CanSetPierSide; }
        public System.Boolean CanSetRightAscensionRate { get => proxied.CanSetRightAscensionRate; }
        public System.Boolean CanSetTracking { get => proxied.CanSetTracking; }
        public System.Boolean CanSlew { get => proxied.CanSlew; }
        public System.Boolean CanSlewAltAz { get => proxied.CanSlewAltAz; }
        public System.Boolean CanSlewAltAzAsync { get => proxied.CanSlewAltAzAsync; }
        public System.Boolean CanSlewAsync { get => proxied.CanSlewAsync; }
        public System.Boolean CanSync { get => proxied.CanSync; }
        public System.Boolean CanSyncAltAz { get => proxied.CanSyncAltAz; }
        public System.Boolean CanUnpark { get => proxied.CanUnpark; }
        public System.Double Declination { get => proxied.Declination; }
        public System.Double DeclinationRate { get => proxied.DeclinationRate; set => proxied.DeclinationRate = value; }
        public System.Boolean DoesRefraction { get => proxied.DoesRefraction; set => proxied.DoesRefraction = value; }
        public ASCOM.DeviceInterface.EquatorialCoordinateType EquatorialSystem { get => proxied.EquatorialSystem; }
        public System.Double FocalLength { get => proxied.FocalLength; }
        public System.Double GuideRateDeclination { get => proxied.GuideRateDeclination; set => proxied.GuideRateDeclination = value; }
        public System.Double GuideRateRightAscension { get => proxied.GuideRateRightAscension; set => proxied.GuideRateRightAscension = value; }
        public System.Boolean IsPulseGuiding { get => proxied.IsPulseGuiding; }
        public System.Double RightAscension { get => proxied.RightAscension; }
        public System.Double RightAscensionRate { get => proxied.RightAscensionRate; set => proxied.RightAscensionRate = value; }
        public ASCOM.DeviceInterface.PierSide SideOfPier { get => proxied.SideOfPier; set => proxied.SideOfPier = value; }
        public System.Double SiderealTime { get => proxied.SiderealTime; }
        public System.Double SiteElevation { get => proxied.SiteElevation; set => proxied.SiteElevation = value; }
        public System.Double SiteLatitude { get => proxied.SiteLatitude; set => proxied.SiteLatitude = value; }
        public System.Double SiteLongitude { get => proxied.SiteLongitude; set => proxied.SiteLongitude = value; }
        public System.Int16 SlewSettleTime { get => proxied.SlewSettleTime; set => proxied.SlewSettleTime = value; }
        public System.Boolean Slewing { get => proxied.Slewing; }
        public System.Double TargetDeclination { get => proxied.TargetDeclination; set => proxied.TargetDeclination = value; }
        public System.Double TargetRightAscension { get => proxied.TargetRightAscension; set => proxied.TargetRightAscension = value; }
        public System.Boolean Tracking { get => proxied.Tracking; set => proxied.Tracking = value; }
        public ASCOM.DeviceInterface.DriveRates TrackingRate { get => proxied.TrackingRate; set => proxied.TrackingRate = value; }
        public ASCOM.DeviceInterface.ITrackingRates TrackingRates { get => proxied.TrackingRates; }
        public System.DateTime UTCDate { get => proxied.UTCDate; set => proxied.UTCDate = value; }
        public System.Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public System.String Description { get => proxied.Description; }
        public System.String DriverInfo { get => proxied.DriverInfo; }
        public System.String DriverVersion { get => proxied.DriverVersion; }
        public System.Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public System.String Name { get => proxied.Name; }
        public System.Collections.ArrayList SupportedActions { get => proxied.SupportedActions; }
        public void AbortSlew() {
            proxied.AbortSlew();
        }
        public ASCOM.DeviceInterface.IAxisRates AxisRates(ASCOM.DeviceInterface.TelescopeAxes Axis) {
            return proxied.AxisRates(Axis);
        }
        public System.Boolean CanMoveAxis(ASCOM.DeviceInterface.TelescopeAxes Axis) {
            return proxied.CanMoveAxis(Axis);
        }
        public ASCOM.DeviceInterface.PierSide DestinationSideOfPier(System.Double RightAscension, System.Double Declination) {
            return proxied.DestinationSideOfPier(RightAscension, Declination);
        }
        public void FindHome() {
            proxied.FindHome();
        }
        public void MoveAxis(ASCOM.DeviceInterface.TelescopeAxes Axis, System.Double Rate) {
            proxied.MoveAxis(Axis, Rate);
        }
        public void Park() {
            proxied.Park();
        }
        public void PulseGuide(ASCOM.DeviceInterface.GuideDirections Direction, System.Int32 Duration) {
            proxied.PulseGuide(Direction, Duration);
        }
        public void SetPark() {
            proxied.SetPark();
        }
        public void SlewToAltAz(System.Double Azimuth, System.Double Altitude) {
            proxied.SlewToAltAz(Azimuth, Altitude);
        }
        public void SlewToAltAzAsync(System.Double Azimuth, System.Double Altitude) {
            proxied.SlewToAltAzAsync(Azimuth, Altitude);
        }
        public void SlewToCoordinates(System.Double RightAscension, System.Double Declination) {
            proxied.SlewToCoordinates(RightAscension, Declination);
        }
        public void SlewToCoordinatesAsync(System.Double RightAscension, System.Double Declination) {
            proxied.SlewToCoordinatesAsync(RightAscension, Declination);
        }
        public void SlewToTarget() {
            proxied.SlewToTarget();
        }
        public void SlewToTargetAsync() {
            proxied.SlewToTargetAsync();
        }
        public void SyncToAltAz(System.Double Azimuth, System.Double Altitude) {
            proxied.SyncToAltAz(Azimuth, Altitude);
        }
        public void SyncToCoordinates(System.Double RightAscension, System.Double Declination) {
            proxied.SyncToCoordinates(RightAscension, Declination);
        }
        public void SyncToTarget() {
            proxied.SyncToTarget();
        }
        public void Unpark() {
            proxied.Unpark();
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public System.String Action(System.String ActionName, System.String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(System.String Command, System.Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public System.Boolean CommandBool(System.String Command, System.Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public System.String CommandString(System.String Command, System.Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public override System.Boolean Equals(System.Object obj) {
            return proxied.Equals(obj);
        }
        public override System.Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override System.String ToString() {
            return proxied.ToString();
        }
    }
    public interface IObservingConditionsFacade : IAscomDeviceFacade<ObservingConditions> {
        System.Double AveragePeriod { get; set; }
        System.Double CloudCover { get; }
        System.Double DewPoint { get; }
        System.Double Humidity { get; }
        System.Double Pressure { get; }
        System.Double RainRate { get; }
        System.Double SkyBrightness { get; }
        System.Double SkyQuality { get; }
        System.Double StarFWHM { get; }
        System.Double SkyTemperature { get; }
        System.Double Temperature { get; }
        System.Double WindDirection { get; }
        System.Double WindGust { get; }
        System.Double WindSpeed { get; }
        System.Collections.ArrayList SupportedActions { get; }
        System.Double TimeSinceLastUpdate(System.String PropertyName);
        System.String SensorDescription(System.String PropertyName);
        void Refresh();
        System.String Action(System.String ActionName, System.String ActionParameters);
        void CommandBlind(System.String Command, System.Boolean Raw);
        System.Boolean CommandBool(System.String Command, System.Boolean Raw);
        System.String CommandString(System.String Command, System.Boolean Raw);
    }

    public class ObservingConditionsFacadeProxy : IObservingConditionsFacade {
        private ObservingConditions proxied;

        public ObservingConditions Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public System.Double AveragePeriod { get => proxied.AveragePeriod; set => proxied.AveragePeriod = value; }
        public System.Double CloudCover { get => proxied.CloudCover; }
        public System.Double DewPoint { get => proxied.DewPoint; }
        public System.Double Humidity { get => proxied.Humidity; }
        public System.Double Pressure { get => proxied.Pressure; }
        public System.Double RainRate { get => proxied.RainRate; }
        public System.Double SkyBrightness { get => proxied.SkyBrightness; }
        public System.Double SkyQuality { get => proxied.SkyQuality; }
        public System.Double StarFWHM { get => proxied.StarFWHM; }
        public System.Double SkyTemperature { get => proxied.SkyTemperature; }
        public System.Double Temperature { get => proxied.Temperature; }
        public System.Double WindDirection { get => proxied.WindDirection; }
        public System.Double WindGust { get => proxied.WindGust; }
        public System.Double WindSpeed { get => proxied.WindSpeed; }
        public System.Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public System.String Description { get => proxied.Description; }
        public System.String DriverInfo { get => proxied.DriverInfo; }
        public System.String DriverVersion { get => proxied.DriverVersion; }
        public System.Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public System.String Name { get => proxied.Name; }
        public System.Collections.ArrayList SupportedActions { get => proxied.SupportedActions; }
        public System.Double TimeSinceLastUpdate(System.String PropertyName) {
            return proxied.TimeSinceLastUpdate(PropertyName);
        }
        public System.String SensorDescription(System.String PropertyName) {
            return proxied.SensorDescription(PropertyName);
        }
        public void Refresh() {
            proxied.Refresh();
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public System.String Action(System.String ActionName, System.String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(System.String Command, System.Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public System.Boolean CommandBool(System.String Command, System.Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public System.String CommandString(System.String Command, System.Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public override System.Boolean Equals(System.Object obj) {
            return proxied.Equals(obj);
        }
        public override System.Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override System.String ToString() {
            return proxied.ToString();
        }
    }
    public interface ISwitchFacade : IAscomDeviceFacade<Switch> {
        System.Int16 MaxSwitch { get; }
        System.Collections.ArrayList SupportedActions { get; }
        System.String GetSwitchName(System.Int16 id);
        void SetSwitchName(System.Int16 id, System.String name);
        System.String GetSwitchDescription(System.Int16 id);
        System.Boolean CanWrite(System.Int16 id);
        System.Boolean GetSwitch(System.Int16 id);
        void SetSwitch(System.Int16 id, System.Boolean state);
        System.Double MaxSwitchValue(System.Int16 id);
        System.Double MinSwitchValue(System.Int16 id);
        System.Double SwitchStep(System.Int16 id);
        System.Double GetSwitchValue(System.Int16 id);
        void SetSwitchValue(System.Int16 id, System.Double value);
        System.String Action(System.String ActionName, System.String ActionParameters);
        void CommandBlind(System.String Command, System.Boolean Raw);
        System.Boolean CommandBool(System.String Command, System.Boolean Raw);
        System.String CommandString(System.String Command, System.Boolean Raw);
    }

    public class SwitchFacadeProxy : ISwitchFacade {
        private Switch proxied;

        public Switch Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public System.Int16 MaxSwitch { get => proxied.MaxSwitch; }
        public System.Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public System.String Description { get => proxied.Description; }
        public System.String DriverInfo { get => proxied.DriverInfo; }
        public System.String DriverVersion { get => proxied.DriverVersion; }
        public System.Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public System.String Name { get => proxied.Name; }
        public System.Collections.ArrayList SupportedActions { get => proxied.SupportedActions; }
        public System.String GetSwitchName(System.Int16 id) {
            return proxied.GetSwitchName(id);
        }
        public void SetSwitchName(System.Int16 id, System.String name) {
            proxied.SetSwitchName(id, name);
        }
        public System.String GetSwitchDescription(System.Int16 id) {
            return proxied.GetSwitchDescription(id);
        }
        public System.Boolean CanWrite(System.Int16 id) {
            return proxied.CanWrite(id);
        }
        public System.Boolean GetSwitch(System.Int16 id) {
            return proxied.GetSwitch(id);
        }
        public void SetSwitch(System.Int16 id, System.Boolean state) {
            proxied.SetSwitch(id, state);
        }
        public System.Double MaxSwitchValue(System.Int16 id) {
            return proxied.MaxSwitchValue(id);
        }
        public System.Double MinSwitchValue(System.Int16 id) {
            return proxied.MinSwitchValue(id);
        }
        public System.Double SwitchStep(System.Int16 id) {
            return proxied.SwitchStep(id);
        }
        public System.Double GetSwitchValue(System.Int16 id) {
            return proxied.GetSwitchValue(id);
        }
        public void SetSwitchValue(System.Int16 id, System.Double value) {
            proxied.SetSwitchValue(id, value);
        }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public System.String Action(System.String ActionName, System.String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(System.String Command, System.Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public System.Boolean CommandBool(System.String Command, System.Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public System.String CommandString(System.String Command, System.Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public override System.Boolean Equals(System.Object obj) {
            return proxied.Equals(obj);
        }
        public override System.Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override System.String ToString() {
            return proxied.ToString();
        }
    }
    public interface IFilterWheelFacade : IAscomDeviceFacade<FilterWheel> {
        System.Int32[] FocusOffsets { get; }
        System.String[] Names { get; }
        System.Int16 Position { get; set; }
        System.Collections.ArrayList SupportedActions { get; }
        System.String Action(System.String ActionName, System.String ActionParameters);
        void CommandBlind(System.String Command, System.Boolean Raw);
        System.Boolean CommandBool(System.String Command, System.Boolean Raw);
        System.String CommandString(System.String Command, System.Boolean Raw);
    }

    public class FilterWheelFacadeProxy : IFilterWheelFacade {
        private FilterWheel proxied;

        public FilterWheel Proxied { 
            get => proxied; 
            set {
                if (proxied != null) {
                    throw new Exception("Proxied already set");
                }
                proxied = value;
            }
        }
        public System.Int32[] FocusOffsets { get => proxied.FocusOffsets; }
        public System.String[] Names { get => proxied.Names; }
        public System.Int16 Position { get => proxied.Position; set => proxied.Position = value; }
        public System.Boolean Connected { get => proxied.Connected; set => proxied.Connected = value; }
        public System.String Description { get => proxied.Description; }
        public System.String DriverInfo { get => proxied.DriverInfo; }
        public System.String DriverVersion { get => proxied.DriverVersion; }
        public System.Int16 InterfaceVersion { get => proxied.InterfaceVersion; }
        public System.String Name { get => proxied.Name; }
        public System.Collections.ArrayList SupportedActions { get => proxied.SupportedActions; }
        public void Dispose() {
            proxied.Dispose();
        }
        public void SetupDialog() {
            proxied.SetupDialog();
        }
        public System.String Action(System.String ActionName, System.String ActionParameters) {
            return proxied.Action(ActionName, ActionParameters);
        }
        public void CommandBlind(System.String Command, System.Boolean Raw) {
            proxied.CommandBlind(Command, Raw);
        }
        public System.Boolean CommandBool(System.String Command, System.Boolean Raw) {
            return proxied.CommandBool(Command, Raw);
        }
        public System.String CommandString(System.String Command, System.Boolean Raw) {
            return proxied.CommandString(Command, Raw);
        }
        public override System.Boolean Equals(System.Object obj) {
            return proxied.Equals(obj);
        }
        public override System.Int32 GetHashCode() {
            return proxied.GetHashCode();
        }
        public override System.String ToString() {
            return proxied.ToString();
        }
    }
}